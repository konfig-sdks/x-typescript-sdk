/* tslint:disable */
/* eslint-disable */
/*
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.62


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDmConversationRequest } from '../models';
// @ts-ignore
import { CreateDmEventResponse } from '../models';
// @ts-ignore
import { CreateMessageRequest } from '../models';
// @ts-ignore
import { DmMediaAttachment } from '../models';
// @ts-ignore
import { Get2DmConversationsIdDmEventsResponse } from '../models';
// @ts-ignore
import { Get2DmConversationsWithParticipantIdDmEventsResponse } from '../models';
// @ts-ignore
import { Get2DmEventsResponse } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DirectMessagesApi - axios parameter creator
 * @export
 */
export const DirectMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new DM Conversation.
         * @summary Create a new DM Conversation
         * @param {CreateDmConversationRequest} [createDmConversationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDmConversation: async (createDmConversationRequest?: CreateDmConversationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/2/dm_conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createDmConversationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_conversations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createDmConversationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {string} participantId The ID of the participant user for the One to One DM conversation.
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>} [eventTypes] The set of event_types to include in the results.
         * @param {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>} [dmEventFields] A comma separated list of DmEvent fields to display.
         * @param {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>} [mediaFields] A comma separated list of Media fields to display.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>} [tweetFields] A comma separated list of Tweet fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDmEvents: async (participantId: string, maxResults?: number, paginationToken?: string, eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>, dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>, expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>, mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('getDmEvents', 'participantId', participantId)
            const localVarPath = `/2/dm_conversations/with/{participant_id}/dm_events`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId !== undefined ? participantId : `-participant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes).join(COLLECTION_FORMATS.csv);
            }

            if (dmEventFields) {
                localVarQueryParameter['dm_event.fields'] = Array.from(dmEventFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (mediaFields) {
                localVarQueryParameter['media.fields'] = Array.from(mediaFields).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }

            if (tweetFields) {
                localVarQueryParameter['tweet.fields'] = Array.from(tweetFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_conversations/with/{participant_id}/dm_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {string} id The DM Conversation ID.
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>} [eventTypes] The set of event_types to include in the results.
         * @param {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>} [dmEventFields] A comma separated list of DmEvent fields to display.
         * @param {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>} [mediaFields] A comma separated list of Media fields to display.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>} [tweetFields] A comma separated list of Tweet fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDmEvents_1: async (id: string, maxResults?: number, paginationToken?: string, eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>, dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>, expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>, mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDmEvents_1', 'id', id)
            const localVarPath = `/2/dm_conversations/{id}/dm_events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes).join(COLLECTION_FORMATS.csv);
            }

            if (dmEventFields) {
                localVarQueryParameter['dm_event.fields'] = Array.from(dmEventFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (mediaFields) {
                localVarQueryParameter['media.fields'] = Array.from(mediaFields).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }

            if (tweetFields) {
                localVarQueryParameter['tweet.fields'] = Array.from(tweetFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_conversations/{id}/dm_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns recent DM Events across DM conversations
         * @summary Get recent DM Events
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>} [eventTypes] The set of event_types to include in the results.
         * @param {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>} [dmEventFields] A comma separated list of DmEvent fields to display.
         * @param {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>} [mediaFields] A comma separated list of Media fields to display.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>} [tweetFields] A comma separated list of Tweet fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentDmEvents: async (maxResults?: number, paginationToken?: string, eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>, dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>, expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>, mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/2/dm_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes).join(COLLECTION_FORMATS.csv);
            }

            if (dmEventFields) {
                localVarQueryParameter['dm_event.fields'] = Array.from(dmEventFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (mediaFields) {
                localVarQueryParameter['media.fields'] = Array.from(mediaFields).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }

            if (tweetFields) {
                localVarQueryParameter['tweet.fields'] = Array.from(tweetFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new message for a DM Conversation specified by DM Conversation ID
         * @summary Send a new message to a DM Conversation
         * @param {string} dmConversationId The DM Conversation ID.
         * @param {CreateMessageRequest} [createMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewMessageToDmConversation: async (dmConversationId: string, createMessageRequest?: CreateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dmConversationId' is not null or undefined
            assertParamExists('sendNewMessageToDmConversation', 'dmConversationId', dmConversationId)
            const localVarPath = `/2/dm_conversations/{dm_conversation_id}/messages`
                .replace(`{${"dm_conversation_id"}}`, encodeURIComponent(String(dmConversationId !== undefined ? dmConversationId : `-dm_conversation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_conversations/{dm_conversation_id}/messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new message for a DM Conversation with a participant user by ID
         * @summary Send a new message to a user
         * @param {string} participantId The ID of the recipient user that will receive the DM.
         * @param {CreateMessageRequest} [createMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewMessageToUser: async (participantId: string, createMessageRequest?: CreateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('sendNewMessageToUser', 'participantId', participantId)
            const localVarPath = `/2/dm_conversations/with/{participant_id}/messages`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId !== undefined ? participantId : `-participant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["dm.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/dm_conversations/with/{participant_id}/messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectMessagesApi - functional programming interface
 * @export
 */
export const DirectMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new DM Conversation.
         * @summary Create a new DM Conversation
         * @param {DirectMessagesApiCreateNewDmConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDmConversation(requestParameters: DirectMessagesApiCreateNewDmConversationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDmEventResponse>> {
            const createDmConversationRequest: CreateDmConversationRequest = {
                conversation_type: requestParameters.conversation_type,
                message: requestParameters.message,
                participant_ids: requestParameters.participant_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDmConversation(createDmConversationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {DirectMessagesApiGetDmEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDmEvents(requestParameters: DirectMessagesApiGetDmEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2DmConversationsWithParticipantIdDmEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDmEvents(requestParameters.participantId, requestParameters.maxResults, requestParameters.paginationToken, requestParameters.eventTypes, requestParameters.dmEventFields, requestParameters.expansions, requestParameters.mediaFields, requestParameters.userFields, requestParameters.tweetFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {DirectMessagesApiGetDmEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDmEvents_1(requestParameters: DirectMessagesApiGetDmEvents0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2DmConversationsIdDmEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDmEvents_1(requestParameters.id, requestParameters.maxResults, requestParameters.paginationToken, requestParameters.eventTypes, requestParameters.dmEventFields, requestParameters.expansions, requestParameters.mediaFields, requestParameters.userFields, requestParameters.tweetFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns recent DM Events across DM conversations
         * @summary Get recent DM Events
         * @param {DirectMessagesApiGetRecentDmEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentDmEvents(requestParameters: DirectMessagesApiGetRecentDmEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2DmEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentDmEvents(requestParameters.maxResults, requestParameters.paginationToken, requestParameters.eventTypes, requestParameters.dmEventFields, requestParameters.expansions, requestParameters.mediaFields, requestParameters.userFields, requestParameters.tweetFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new message for a DM Conversation specified by DM Conversation ID
         * @summary Send a new message to a DM Conversation
         * @param {DirectMessagesApiSendNewMessageToDmConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNewMessageToDmConversation(requestParameters: DirectMessagesApiSendNewMessageToDmConversationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDmEventResponse>> {
            const createMessageRequest: CreateMessageRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNewMessageToDmConversation(requestParameters.dmConversationId, createMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new message for a DM Conversation with a participant user by ID
         * @summary Send a new message to a user
         * @param {DirectMessagesApiSendNewMessageToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNewMessageToUser(requestParameters: DirectMessagesApiSendNewMessageToUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDmEventResponse>> {
            const createMessageRequest: CreateMessageRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNewMessageToUser(requestParameters.participantId, createMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectMessagesApi - factory interface
 * @export
 */
export const DirectMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectMessagesApiFp(configuration)
    return {
        /**
         * Creates a new DM Conversation.
         * @summary Create a new DM Conversation
         * @param {DirectMessagesApiCreateNewDmConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDmConversation(requestParameters: DirectMessagesApiCreateNewDmConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateDmEventResponse> {
            return localVarFp.createNewDmConversation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {DirectMessagesApiGetDmEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDmEvents(requestParameters: DirectMessagesApiGetDmEventsRequest, options?: AxiosRequestConfig): AxiosPromise<Get2DmConversationsWithParticipantIdDmEventsResponse> {
            return localVarFp.getDmEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns DM Events for a DM Conversation
         * @summary Get DM Events for a DM Conversation
         * @param {DirectMessagesApiGetDmEvents0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDmEvents_1(requestParameters: DirectMessagesApiGetDmEvents0Request, options?: AxiosRequestConfig): AxiosPromise<Get2DmConversationsIdDmEventsResponse> {
            return localVarFp.getDmEvents_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns recent DM Events across DM conversations
         * @summary Get recent DM Events
         * @param {DirectMessagesApiGetRecentDmEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentDmEvents(requestParameters: DirectMessagesApiGetRecentDmEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Get2DmEventsResponse> {
            return localVarFp.getRecentDmEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new message for a DM Conversation specified by DM Conversation ID
         * @summary Send a new message to a DM Conversation
         * @param {DirectMessagesApiSendNewMessageToDmConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewMessageToDmConversation(requestParameters: DirectMessagesApiSendNewMessageToDmConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateDmEventResponse> {
            return localVarFp.sendNewMessageToDmConversation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new message for a DM Conversation with a participant user by ID
         * @summary Send a new message to a user
         * @param {DirectMessagesApiSendNewMessageToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewMessageToUser(requestParameters: DirectMessagesApiSendNewMessageToUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateDmEventResponse> {
            return localVarFp.sendNewMessageToUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDmConversation operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiCreateNewDmConversationRequest
 */
export type DirectMessagesApiCreateNewDmConversationRequest = {
    
} & CreateDmConversationRequest

/**
 * Request parameters for getDmEvents operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiGetDmEventsRequest
 */
export type DirectMessagesApiGetDmEventsRequest = {
    
    /**
    * The ID of the participant user for the One to One DM conversation.
    * @type {string}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly participantId: string
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly paginationToken?: string
    
    /**
    * The set of event_types to include in the results.
    * @type {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>
    
    /**
    * A comma separated list of DmEvent fields to display.
    * @type {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>
    
    /**
    * A comma separated list of Media fields to display.
    * @type {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
    /**
    * A comma separated list of Tweet fields to display.
    * @type {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>}
    * @memberof DirectMessagesApiGetDmEvents
    */
    readonly tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>
    
}

/**
 * Request parameters for getDmEvents_1 operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiGetDmEvents0Request
 */
export type DirectMessagesApiGetDmEvents0Request = {
    
    /**
    * The DM Conversation ID.
    * @type {string}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly id: string
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly paginationToken?: string
    
    /**
    * The set of event_types to include in the results.
    * @type {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>
    
    /**
    * A comma separated list of DmEvent fields to display.
    * @type {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>
    
    /**
    * A comma separated list of Media fields to display.
    * @type {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
    /**
    * A comma separated list of Tweet fields to display.
    * @type {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>}
    * @memberof DirectMessagesApiGetDmEvents0
    */
    readonly tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>
    
}

/**
 * Request parameters for getRecentDmEvents operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiGetRecentDmEventsRequest
 */
export type DirectMessagesApiGetRecentDmEventsRequest = {
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly paginationToken?: string
    
    /**
    * The set of event_types to include in the results.
    * @type {Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly eventTypes?: Set<'MessageCreate' | 'ParticipantsJoin' | 'ParticipantsLeave'>
    
    /**
    * A comma separated list of DmEvent fields to display.
    * @type {Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly dmEventFields?: Set<'attachments' | 'created_at' | 'dm_conversation_id' | 'event_type' | 'id' | 'participant_ids' | 'referenced_tweets' | 'sender_id' | 'text'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly expansions?: Set<'attachments.media_keys' | 'participant_ids' | 'referenced_tweets.id' | 'sender_id'>
    
    /**
    * A comma separated list of Media fields to display.
    * @type {Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly mediaFields?: Set<'alt_text' | 'duration_ms' | 'height' | 'media_key' | 'non_public_metrics' | 'organic_metrics' | 'preview_image_url' | 'promoted_metrics' | 'public_metrics' | 'type' | 'url' | 'variants' | 'width'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
    /**
    * A comma separated list of Tweet fields to display.
    * @type {Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>}
    * @memberof DirectMessagesApiGetRecentDmEvents
    */
    readonly tweetFields?: Set<'attachments' | 'author_id' | 'context_annotations' | 'conversation_id' | 'created_at' | 'edit_controls' | 'edit_history_tweet_ids' | 'entities' | 'geo' | 'id' | 'in_reply_to_user_id' | 'lang' | 'non_public_metrics' | 'organic_metrics' | 'possibly_sensitive' | 'promoted_metrics' | 'public_metrics' | 'referenced_tweets' | 'reply_settings' | 'source' | 'text' | 'withheld'>
    
}

/**
 * Request parameters for sendNewMessageToDmConversation operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiSendNewMessageToDmConversationRequest
 */
export type DirectMessagesApiSendNewMessageToDmConversationRequest = {
    
    /**
    * The DM Conversation ID.
    * @type {string}
    * @memberof DirectMessagesApiSendNewMessageToDmConversation
    */
    readonly dmConversationId: string
    
} & CreateMessageRequest

/**
 * Request parameters for sendNewMessageToUser operation in DirectMessagesApi.
 * @export
 * @interface DirectMessagesApiSendNewMessageToUserRequest
 */
export type DirectMessagesApiSendNewMessageToUserRequest = {
    
    /**
    * The ID of the recipient user that will receive the DM.
    * @type {string}
    * @memberof DirectMessagesApiSendNewMessageToUser
    */
    readonly participantId: string
    
} & CreateMessageRequest

/**
 * DirectMessagesApiGenerated - object-oriented interface
 * @export
 * @class DirectMessagesApiGenerated
 * @extends {BaseAPI}
 */
export class DirectMessagesApiGenerated extends BaseAPI {
    /**
     * Creates a new DM Conversation.
     * @summary Create a new DM Conversation
     * @param {DirectMessagesApiCreateNewDmConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public createNewDmConversation(requestParameters: DirectMessagesApiCreateNewDmConversationRequest, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).createNewDmConversation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns DM Events for a DM Conversation
     * @summary Get DM Events for a DM Conversation
     * @param {DirectMessagesApiGetDmEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public getDmEvents(requestParameters: DirectMessagesApiGetDmEventsRequest, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).getDmEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns DM Events for a DM Conversation
     * @summary Get DM Events for a DM Conversation
     * @param {DirectMessagesApiGetDmEvents0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public getDmEvents_1(requestParameters: DirectMessagesApiGetDmEvents0Request, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).getDmEvents_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns recent DM Events across DM conversations
     * @summary Get recent DM Events
     * @param {DirectMessagesApiGetRecentDmEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public getRecentDmEvents(requestParameters: DirectMessagesApiGetRecentDmEventsRequest = {}, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).getRecentDmEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @summary Send a new message to a DM Conversation
     * @param {DirectMessagesApiSendNewMessageToDmConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public sendNewMessageToDmConversation(requestParameters: DirectMessagesApiSendNewMessageToDmConversationRequest, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).sendNewMessageToDmConversation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new message for a DM Conversation with a participant user by ID
     * @summary Send a new message to a user
     * @param {DirectMessagesApiSendNewMessageToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMessagesApiGenerated
     */
    public sendNewMessageToUser(requestParameters: DirectMessagesApiSendNewMessageToUserRequest, options?: AxiosRequestConfig) {
        return DirectMessagesApiFp(this.configuration).sendNewMessageToUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
