/* tslint:disable */
/* eslint-disable */
/*
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.62


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Get2ListsIdResponse } from '../models';
// @ts-ignore
import { Get2UsersIdFollowedListsResponse } from '../models';
// @ts-ignore
import { Get2UsersIdListMembershipsResponse } from '../models';
// @ts-ignore
import { Get2UsersIdOwnedListsResponse } from '../models';
// @ts-ignore
import { Get2UsersIdPinnedListsResponse } from '../models';
// @ts-ignore
import { ListAddUserRequest } from '../models';
// @ts-ignore
import { ListCreateRequest } from '../models';
// @ts-ignore
import { ListCreateResponse } from '../models';
// @ts-ignore
import { ListDeleteResponse } from '../models';
// @ts-ignore
import { ListFollowedRequest } from '../models';
// @ts-ignore
import { ListFollowedResponse } from '../models';
// @ts-ignore
import { ListMutateResponse } from '../models';
// @ts-ignore
import { ListPinnedRequest } from '../models';
// @ts-ignore
import { ListPinnedResponse } from '../models';
// @ts-ignore
import { ListUnpinResponse } from '../models';
// @ts-ignore
import { ListUpdateRequest } from '../models';
// @ts-ignore
import { ListUpdateResponse } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Causes a User to become a member of a List.
         * @summary Add a List member
         * @param {string} id The ID of the List for which to add a member.
         * @param {ListAddUserRequest} [listAddUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMember: async (id: string, listAddUserRequest?: ListAddUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMember', 'id', id)
            const localVarPath = `/2/lists/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listAddUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists/{id}/members',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listAddUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new List.
         * @summary Create List
         * @param {ListCreateRequest} [listCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewList: async (listCreateRequest?: ListCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/2/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a List that you own.
         * @summary Delete List
         * @param {string} id The ID of the List to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwnedList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOwnedList', 'id', id)
            const localVarPath = `/2/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a User to follow a List.
         * @summary Follow a List
         * @param {string} id The ID of the authenticated source User that will follow the List.
         * @param {ListFollowedRequest} [listFollowedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followList: async (id: string, listFollowedRequest?: ListFollowedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followList', 'id', id)
            const localVarPath = `/2/users/{id}/followed_lists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listFollowedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/followed_lists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listFollowedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a User\'s followed Lists.
         * @summary Get User\'s Followed Lists
         * @param {string} id The ID of the User to lookup.
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>} [listFields] A comma separated list of List fields to display.
         * @param {Set<'owner_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (id: string, maxResults?: number, paginationToken?: string, listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>, expansions?: Set<'owner_id'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFollowed', 'id', id)
            const localVarPath = `/2/users/{id}/followed_lists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (listFields) {
                localVarQueryParameter['list.fields'] = Array.from(listFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/followed_lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a User\'s List Memberships.
         * @summary Get a User\'s List Memberships
         * @param {string} id The ID of the User to lookup.
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>} [listFields] A comma separated list of List fields to display.
         * @param {Set<'owner_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMemberships: async (id: string, maxResults?: number, paginationToken?: string, listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>, expansions?: Set<'owner_id'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserMemberships', 'id', id)
            const localVarPath = `/2/users/{id}/list_memberships`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (listFields) {
                localVarQueryParameter['list.fields'] = Array.from(listFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/list_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a User\'s Owned Lists.
         * @summary Get a User\'s Owned Lists.
         * @param {string} id The ID of the User to lookup.
         * @param {number} [maxResults] The maximum number of results.
         * @param {string} [paginationToken] This parameter is used to get a specified \&#39;page\&#39; of results.
         * @param {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>} [listFields] A comma separated list of List fields to display.
         * @param {Set<'owner_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOwnedLists: async (id: string, maxResults?: number, paginationToken?: string, listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>, expansions?: Set<'owner_id'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserOwnedLists', 'id', id)
            const localVarPath = `/2/users/{id}/owned_lists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (listFields) {
                localVarQueryParameter['list.fields'] = Array.from(listFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/owned_lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a User\'s Pinned Lists.
         * @summary Get a User\'s Pinned Lists
         * @param {string} id The ID of the authenticated source User for whom to return results.
         * @param {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>} [listFields] A comma separated list of List fields to display.
         * @param {Set<'owner_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPinnedLists: async (id: string, listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>, expansions?: Set<'owner_id'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserPinnedLists', 'id', id)
            const localVarPath = `/2/users/{id}/pinned_lists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (listFields) {
                localVarQueryParameter['list.fields'] = Array.from(listFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/pinned_lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a List.
         * @summary List lookup by List ID.
         * @param {string} id The ID of the List.
         * @param {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>} [listFields] A comma separated list of List fields to display.
         * @param {Set<'owner_id'>} [expansions] A comma separated list of fields to expand.
         * @param {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>} [userFields] A comma separated list of User fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupByListId: async (id: string, listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>, expansions?: Set<'owner_id'>, userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lookupByListId', 'id', id)
            const localVarPath = `/2/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.read", "tweet.read", "users.read"], configuration)
            // authentication UserToken required
            if (listFields) {
                localVarQueryParameter['list.fields'] = Array.from(listFields).join(COLLECTION_FORMATS.csv);
            }

            if (expansions) {
                localVarQueryParameter['expansions'] = Array.from(expansions).join(COLLECTION_FORMATS.csv);
            }

            if (userFields) {
                localVarQueryParameter['user.fields'] = Array.from(userFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a User to pin a List.
         * @summary Pin a List
         * @param {string} id The ID of the authenticated source User that will pin the List.
         * @param {ListPinnedRequest} listPinnedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinList: async (id: string, listPinnedRequest: ListPinnedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pinList', 'id', id)
            // verify required parameter 'listPinnedRequest' is not null or undefined
            assertParamExists('pinList', 'listPinnedRequest', listPinnedRequest)
            const localVarPath = `/2/users/{id}/pinned_lists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listPinnedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/pinned_lists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listPinnedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a User to be removed from the members of a List.
         * @summary Remove a List member
         * @param {string} id The ID of the List to remove a member.
         * @param {string} userId The ID of User that will be removed from the List.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeMember', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeMember', 'userId', userId)
            const localVarPath = `/2/lists/{id}/members/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists/{id}/members/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a User to unfollow a List.
         * @summary Unfollow a List
         * @param {string} id The ID of the authenticated source User that will unfollow the List.
         * @param {string} listId The ID of the List to unfollow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowList: async (id: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unfollowList', 'id', id)
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('unfollowList', 'listId', listId)
            const localVarPath = `/2/users/{id}/followed_lists/{list_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/followed_lists/{list_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a User to remove a pinned List.
         * @summary Unpin a List
         * @param {string} id The ID of the authenticated source User for whom to return results.
         * @param {string} listId The ID of the List to unpin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinList: async (id: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpinList', 'id', id)
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('unpinList', 'listId', listId)
            const localVarPath = `/2/users/{id}/pinned_lists/{list_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/{id}/pinned_lists/{list_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a List that you own.
         * @summary Update List.
         * @param {string} id The ID of the List to modify.
         * @param {ListUpdateRequest} [listUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnedList: async (id: string, listUpdateRequest?: ListUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOwnedList', 'id', id)
            const localVarPath = `/2/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2UserToken required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2UserToken", ["list.write", "tweet.read", "users.read"], configuration)
            // authentication UserToken required

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/lists/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Causes a User to become a member of a List.
         * @summary Add a List member
         * @param {ListsApiAddMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMember(requestParameters: ListsApiAddMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMutateResponse>> {
            const listAddUserRequest: ListAddUserRequest = {
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMember(requestParameters.id, listAddUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new List.
         * @summary Create List
         * @param {ListsApiCreateNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewList(requestParameters: ListsApiCreateNewListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCreateResponse>> {
            const listCreateRequest: ListCreateRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                private: requestParameters.private
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewList(listCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a List that you own.
         * @summary Delete List
         * @param {ListsApiDeleteOwnedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOwnedList(requestParameters: ListsApiDeleteOwnedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOwnedList(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Causes a User to follow a List.
         * @summary Follow a List
         * @param {ListsApiFollowListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followList(requestParameters: ListsApiFollowListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFollowedResponse>> {
            const listFollowedRequest: ListFollowedRequest = {
                list_id: requestParameters.list_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.followList(requestParameters.id, listFollowedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a User\'s followed Lists.
         * @summary Get User\'s Followed Lists
         * @param {ListsApiGetFollowedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(requestParameters: ListsApiGetFollowedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2UsersIdFollowedListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(requestParameters.id, requestParameters.maxResults, requestParameters.paginationToken, requestParameters.listFields, requestParameters.expansions, requestParameters.userFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a User\'s List Memberships.
         * @summary Get a User\'s List Memberships
         * @param {ListsApiGetUserMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMemberships(requestParameters: ListsApiGetUserMembershipsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2UsersIdListMembershipsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMemberships(requestParameters.id, requestParameters.maxResults, requestParameters.paginationToken, requestParameters.listFields, requestParameters.expansions, requestParameters.userFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a User\'s Owned Lists.
         * @summary Get a User\'s Owned Lists.
         * @param {ListsApiGetUserOwnedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOwnedLists(requestParameters: ListsApiGetUserOwnedListsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2UsersIdOwnedListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOwnedLists(requestParameters.id, requestParameters.maxResults, requestParameters.paginationToken, requestParameters.listFields, requestParameters.expansions, requestParameters.userFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a User\'s Pinned Lists.
         * @summary Get a User\'s Pinned Lists
         * @param {ListsApiGetUserPinnedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPinnedLists(requestParameters: ListsApiGetUserPinnedListsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2UsersIdPinnedListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPinnedLists(requestParameters.id, requestParameters.listFields, requestParameters.expansions, requestParameters.userFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a List.
         * @summary List lookup by List ID.
         * @param {ListsApiLookupByListIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupByListId(requestParameters: ListsApiLookupByListIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2ListsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupByListId(requestParameters.id, requestParameters.listFields, requestParameters.expansions, requestParameters.userFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Causes a User to pin a List.
         * @summary Pin a List
         * @param {ListsApiPinListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinList(requestParameters: ListsApiPinListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPinnedResponse>> {
            const listPinnedRequest: ListPinnedRequest = {
                list_id: requestParameters.list_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinList(requestParameters.id, listPinnedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Causes a User to be removed from the members of a List.
         * @summary Remove a List member
         * @param {ListsApiRemoveMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMember(requestParameters: ListsApiRemoveMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMutateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMember(requestParameters.id, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Causes a User to unfollow a List.
         * @summary Unfollow a List
         * @param {ListsApiUnfollowListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowList(requestParameters: ListsApiUnfollowListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFollowedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowList(requestParameters.id, requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Causes a User to remove a pinned List.
         * @summary Unpin a List
         * @param {ListsApiUnpinListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpinList(requestParameters: ListsApiUnpinListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUnpinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpinList(requestParameters.id, requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a List that you own.
         * @summary Update List.
         * @param {ListsApiUpdateOwnedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOwnedList(requestParameters: ListsApiUpdateOwnedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUpdateResponse>> {
            const listUpdateRequest: ListUpdateRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                private: requestParameters.private
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOwnedList(requestParameters.id, listUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * Causes a User to become a member of a List.
         * @summary Add a List member
         * @param {ListsApiAddMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMember(requestParameters: ListsApiAddMemberRequest, options?: AxiosRequestConfig): AxiosPromise<ListMutateResponse> {
            return localVarFp.addMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new List.
         * @summary Create List
         * @param {ListsApiCreateNewListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewList(requestParameters: ListsApiCreateNewListRequest, options?: AxiosRequestConfig): AxiosPromise<ListCreateResponse> {
            return localVarFp.createNewList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a List that you own.
         * @summary Delete List
         * @param {ListsApiDeleteOwnedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwnedList(requestParameters: ListsApiDeleteOwnedListRequest, options?: AxiosRequestConfig): AxiosPromise<ListDeleteResponse> {
            return localVarFp.deleteOwnedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a User to follow a List.
         * @summary Follow a List
         * @param {ListsApiFollowListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followList(requestParameters: ListsApiFollowListRequest, options?: AxiosRequestConfig): AxiosPromise<ListFollowedResponse> {
            return localVarFp.followList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a User\'s followed Lists.
         * @summary Get User\'s Followed Lists
         * @param {ListsApiGetFollowedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(requestParameters: ListsApiGetFollowedRequest, options?: AxiosRequestConfig): AxiosPromise<Get2UsersIdFollowedListsResponse> {
            return localVarFp.getFollowed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a User\'s List Memberships.
         * @summary Get a User\'s List Memberships
         * @param {ListsApiGetUserMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMemberships(requestParameters: ListsApiGetUserMembershipsRequest, options?: AxiosRequestConfig): AxiosPromise<Get2UsersIdListMembershipsResponse> {
            return localVarFp.getUserMemberships(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a User\'s Owned Lists.
         * @summary Get a User\'s Owned Lists.
         * @param {ListsApiGetUserOwnedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOwnedLists(requestParameters: ListsApiGetUserOwnedListsRequest, options?: AxiosRequestConfig): AxiosPromise<Get2UsersIdOwnedListsResponse> {
            return localVarFp.getUserOwnedLists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a User\'s Pinned Lists.
         * @summary Get a User\'s Pinned Lists
         * @param {ListsApiGetUserPinnedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPinnedLists(requestParameters: ListsApiGetUserPinnedListsRequest, options?: AxiosRequestConfig): AxiosPromise<Get2UsersIdPinnedListsResponse> {
            return localVarFp.getUserPinnedLists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a List.
         * @summary List lookup by List ID.
         * @param {ListsApiLookupByListIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupByListId(requestParameters: ListsApiLookupByListIdRequest, options?: AxiosRequestConfig): AxiosPromise<Get2ListsIdResponse> {
            return localVarFp.lookupByListId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a User to pin a List.
         * @summary Pin a List
         * @param {ListsApiPinListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinList(requestParameters: ListsApiPinListRequest, options?: AxiosRequestConfig): AxiosPromise<ListPinnedResponse> {
            return localVarFp.pinList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a User to be removed from the members of a List.
         * @summary Remove a List member
         * @param {ListsApiRemoveMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember(requestParameters: ListsApiRemoveMemberRequest, options?: AxiosRequestConfig): AxiosPromise<ListMutateResponse> {
            return localVarFp.removeMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a User to unfollow a List.
         * @summary Unfollow a List
         * @param {ListsApiUnfollowListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowList(requestParameters: ListsApiUnfollowListRequest, options?: AxiosRequestConfig): AxiosPromise<ListFollowedResponse> {
            return localVarFp.unfollowList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a User to remove a pinned List.
         * @summary Unpin a List
         * @param {ListsApiUnpinListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinList(requestParameters: ListsApiUnpinListRequest, options?: AxiosRequestConfig): AxiosPromise<ListUnpinResponse> {
            return localVarFp.unpinList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a List that you own.
         * @summary Update List.
         * @param {ListsApiUpdateOwnedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnedList(requestParameters: ListsApiUpdateOwnedListRequest, options?: AxiosRequestConfig): AxiosPromise<ListUpdateResponse> {
            return localVarFp.updateOwnedList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMember operation in ListsApi.
 * @export
 * @interface ListsApiAddMemberRequest
 */
export type ListsApiAddMemberRequest = {
    
    /**
    * The ID of the List for which to add a member.
    * @type {string}
    * @memberof ListsApiAddMember
    */
    readonly id: string
    
} & ListAddUserRequest

/**
 * Request parameters for createNewList operation in ListsApi.
 * @export
 * @interface ListsApiCreateNewListRequest
 */
export type ListsApiCreateNewListRequest = {
    
} & ListCreateRequest

/**
 * Request parameters for deleteOwnedList operation in ListsApi.
 * @export
 * @interface ListsApiDeleteOwnedListRequest
 */
export type ListsApiDeleteOwnedListRequest = {
    
    /**
    * The ID of the List to delete.
    * @type {string}
    * @memberof ListsApiDeleteOwnedList
    */
    readonly id: string
    
}

/**
 * Request parameters for followList operation in ListsApi.
 * @export
 * @interface ListsApiFollowListRequest
 */
export type ListsApiFollowListRequest = {
    
    /**
    * The ID of the authenticated source User that will follow the List.
    * @type {string}
    * @memberof ListsApiFollowList
    */
    readonly id: string
    
} & ListFollowedRequest

/**
 * Request parameters for getFollowed operation in ListsApi.
 * @export
 * @interface ListsApiGetFollowedRequest
 */
export type ListsApiGetFollowedRequest = {
    
    /**
    * The ID of the User to lookup.
    * @type {string}
    * @memberof ListsApiGetFollowed
    */
    readonly id: string
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof ListsApiGetFollowed
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof ListsApiGetFollowed
    */
    readonly paginationToken?: string
    
    /**
    * A comma separated list of List fields to display.
    * @type {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>}
    * @memberof ListsApiGetFollowed
    */
    readonly listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'owner_id'>}
    * @memberof ListsApiGetFollowed
    */
    readonly expansions?: Set<'owner_id'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof ListsApiGetFollowed
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
}

/**
 * Request parameters for getUserMemberships operation in ListsApi.
 * @export
 * @interface ListsApiGetUserMembershipsRequest
 */
export type ListsApiGetUserMembershipsRequest = {
    
    /**
    * The ID of the User to lookup.
    * @type {string}
    * @memberof ListsApiGetUserMemberships
    */
    readonly id: string
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof ListsApiGetUserMemberships
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof ListsApiGetUserMemberships
    */
    readonly paginationToken?: string
    
    /**
    * A comma separated list of List fields to display.
    * @type {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>}
    * @memberof ListsApiGetUserMemberships
    */
    readonly listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'owner_id'>}
    * @memberof ListsApiGetUserMemberships
    */
    readonly expansions?: Set<'owner_id'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof ListsApiGetUserMemberships
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
}

/**
 * Request parameters for getUserOwnedLists operation in ListsApi.
 * @export
 * @interface ListsApiGetUserOwnedListsRequest
 */
export type ListsApiGetUserOwnedListsRequest = {
    
    /**
    * The ID of the User to lookup.
    * @type {string}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly id: string
    
    /**
    * The maximum number of results.
    * @type {number}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly maxResults?: number
    
    /**
    * This parameter is used to get a specified \'page\' of results.
    * @type {string}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly paginationToken?: string
    
    /**
    * A comma separated list of List fields to display.
    * @type {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'owner_id'>}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly expansions?: Set<'owner_id'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof ListsApiGetUserOwnedLists
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
}

/**
 * Request parameters for getUserPinnedLists operation in ListsApi.
 * @export
 * @interface ListsApiGetUserPinnedListsRequest
 */
export type ListsApiGetUserPinnedListsRequest = {
    
    /**
    * The ID of the authenticated source User for whom to return results.
    * @type {string}
    * @memberof ListsApiGetUserPinnedLists
    */
    readonly id: string
    
    /**
    * A comma separated list of List fields to display.
    * @type {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>}
    * @memberof ListsApiGetUserPinnedLists
    */
    readonly listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'owner_id'>}
    * @memberof ListsApiGetUserPinnedLists
    */
    readonly expansions?: Set<'owner_id'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof ListsApiGetUserPinnedLists
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
}

/**
 * Request parameters for lookupByListId operation in ListsApi.
 * @export
 * @interface ListsApiLookupByListIdRequest
 */
export type ListsApiLookupByListIdRequest = {
    
    /**
    * The ID of the List.
    * @type {string}
    * @memberof ListsApiLookupByListId
    */
    readonly id: string
    
    /**
    * A comma separated list of List fields to display.
    * @type {Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>}
    * @memberof ListsApiLookupByListId
    */
    readonly listFields?: Set<'created_at' | 'description' | 'follower_count' | 'id' | 'member_count' | 'name' | 'owner_id' | 'private'>
    
    /**
    * A comma separated list of fields to expand.
    * @type {Set<'owner_id'>}
    * @memberof ListsApiLookupByListId
    */
    readonly expansions?: Set<'owner_id'>
    
    /**
    * A comma separated list of User fields to display.
    * @type {Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>}
    * @memberof ListsApiLookupByListId
    */
    readonly userFields?: Set<'created_at' | 'description' | 'entities' | 'id' | 'location' | 'name' | 'pinned_tweet_id' | 'profile_image_url' | 'protected' | 'public_metrics' | 'url' | 'username' | 'verified' | 'verified_type' | 'withheld'>
    
}

/**
 * Request parameters for pinList operation in ListsApi.
 * @export
 * @interface ListsApiPinListRequest
 */
export type ListsApiPinListRequest = {
    
    /**
    * The ID of the authenticated source User that will pin the List.
    * @type {string}
    * @memberof ListsApiPinList
    */
    readonly id: string
    
} & ListPinnedRequest

/**
 * Request parameters for removeMember operation in ListsApi.
 * @export
 * @interface ListsApiRemoveMemberRequest
 */
export type ListsApiRemoveMemberRequest = {
    
    /**
    * The ID of the List to remove a member.
    * @type {string}
    * @memberof ListsApiRemoveMember
    */
    readonly id: string
    
    /**
    * The ID of User that will be removed from the List.
    * @type {string}
    * @memberof ListsApiRemoveMember
    */
    readonly userId: string
    
}

/**
 * Request parameters for unfollowList operation in ListsApi.
 * @export
 * @interface ListsApiUnfollowListRequest
 */
export type ListsApiUnfollowListRequest = {
    
    /**
    * The ID of the authenticated source User that will unfollow the List.
    * @type {string}
    * @memberof ListsApiUnfollowList
    */
    readonly id: string
    
    /**
    * The ID of the List to unfollow.
    * @type {string}
    * @memberof ListsApiUnfollowList
    */
    readonly listId: string
    
}

/**
 * Request parameters for unpinList operation in ListsApi.
 * @export
 * @interface ListsApiUnpinListRequest
 */
export type ListsApiUnpinListRequest = {
    
    /**
    * The ID of the authenticated source User for whom to return results.
    * @type {string}
    * @memberof ListsApiUnpinList
    */
    readonly id: string
    
    /**
    * The ID of the List to unpin.
    * @type {string}
    * @memberof ListsApiUnpinList
    */
    readonly listId: string
    
}

/**
 * Request parameters for updateOwnedList operation in ListsApi.
 * @export
 * @interface ListsApiUpdateOwnedListRequest
 */
export type ListsApiUpdateOwnedListRequest = {
    
    /**
    * The ID of the List to modify.
    * @type {string}
    * @memberof ListsApiUpdateOwnedList
    */
    readonly id: string
    
} & ListUpdateRequest

/**
 * ListsApiGenerated - object-oriented interface
 * @export
 * @class ListsApiGenerated
 * @extends {BaseAPI}
 */
export class ListsApiGenerated extends BaseAPI {
    /**
     * Causes a User to become a member of a List.
     * @summary Add a List member
     * @param {ListsApiAddMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public addMember(requestParameters: ListsApiAddMemberRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).addMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new List.
     * @summary Create List
     * @param {ListsApiCreateNewListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public createNewList(requestParameters: ListsApiCreateNewListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).createNewList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a List that you own.
     * @summary Delete List
     * @param {ListsApiDeleteOwnedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public deleteOwnedList(requestParameters: ListsApiDeleteOwnedListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).deleteOwnedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a User to follow a List.
     * @summary Follow a List
     * @param {ListsApiFollowListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public followList(requestParameters: ListsApiFollowListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).followList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a User\'s followed Lists.
     * @summary Get User\'s Followed Lists
     * @param {ListsApiGetFollowedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public getFollowed(requestParameters: ListsApiGetFollowedRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).getFollowed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a User\'s List Memberships.
     * @summary Get a User\'s List Memberships
     * @param {ListsApiGetUserMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public getUserMemberships(requestParameters: ListsApiGetUserMembershipsRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).getUserMemberships(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a User\'s Owned Lists.
     * @summary Get a User\'s Owned Lists.
     * @param {ListsApiGetUserOwnedListsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public getUserOwnedLists(requestParameters: ListsApiGetUserOwnedListsRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).getUserOwnedLists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a User\'s Pinned Lists.
     * @summary Get a User\'s Pinned Lists
     * @param {ListsApiGetUserPinnedListsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public getUserPinnedLists(requestParameters: ListsApiGetUserPinnedListsRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).getUserPinnedLists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a List.
     * @summary List lookup by List ID.
     * @param {ListsApiLookupByListIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public lookupByListId(requestParameters: ListsApiLookupByListIdRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).lookupByListId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a User to pin a List.
     * @summary Pin a List
     * @param {ListsApiPinListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public pinList(requestParameters: ListsApiPinListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).pinList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a User to be removed from the members of a List.
     * @summary Remove a List member
     * @param {ListsApiRemoveMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public removeMember(requestParameters: ListsApiRemoveMemberRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).removeMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a User to unfollow a List.
     * @summary Unfollow a List
     * @param {ListsApiUnfollowListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public unfollowList(requestParameters: ListsApiUnfollowListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).unfollowList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a User to remove a pinned List.
     * @summary Unpin a List
     * @param {ListsApiUnpinListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public unpinList(requestParameters: ListsApiUnpinListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).unpinList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a List that you own.
     * @summary Update List.
     * @param {ListsApiUpdateOwnedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApiGenerated
     */
    public updateOwnedList(requestParameters: ListsApiUpdateOwnedListRequest, options?: AxiosRequestConfig) {
        return ListsApiFp(this.configuration).updateOwnedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
