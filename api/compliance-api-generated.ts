/* tslint:disable */
/* eslint-disable */
/*
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.62


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateComplianceJobRequest } from '../models';
// @ts-ignore
import { CreateComplianceJobResponse } from '../models';
// @ts-ignore
import { Get2ComplianceJobsIdResponse } from '../models';
// @ts-ignore
import { Get2ComplianceJobsResponse } from '../models';
// @ts-ignore
import { Problem } from '../models';
// @ts-ignore
import { TweetComplianceStreamResponse } from '../models';
// @ts-ignore
import { TweetLabelStreamResponse } from '../models';
// @ts-ignore
import { UserComplianceStreamResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a compliance for the given job type
         * @summary Create compliance job
         * @param {CreateComplianceJobRequest} createComplianceJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (createComplianceJobRequest: CreateComplianceJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createComplianceJobRequest' is not null or undefined
            assertParamExists('createJob', 'createComplianceJobRequest', createComplianceJobRequest)
            const localVarPath = `/2/compliance/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createComplianceJobRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/compliance/jobs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createComplianceJobRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Compliance Job by ID
         * @summary Get Compliance Job
         * @param {string} id The ID of the Compliance Job to retrieve.
         * @param {Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>} [complianceJobFields] A comma separated list of ComplianceJob fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobById: async (id: string, complianceJobFields?: Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getJobById', 'id', id)
            const localVarPath = `/2/compliance/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (complianceJobFields) {
                localVarQueryParameter['compliance_job.fields'] = Array.from(complianceJobFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/compliance/jobs/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns recent Compliance Jobs for a given job type and optional job status
         * @summary List Compliance Jobs
         * @param {'tweets' | 'users'} type Type of Compliance Job to list.
         * @param {'created' | 'in_progress' | 'failed' | 'complete'} [status] Status of Compliance Job to list.
         * @param {Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>} [complianceJobFields] A comma separated list of ComplianceJob fields to display.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: async (type: 'tweets' | 'users', status?: 'created' | 'in_progress' | 'failed' | 'complete', complianceJobFields?: Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listJobs', 'type', type)
            const localVarPath = `/2/compliance/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (complianceJobFields) {
                localVarQueryParameter['compliance_job.fields'] = Array.from(complianceJobFields).join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/compliance/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Streams 100% of compliance data for Tweets
         * @summary Tweets Compliance stream
         * @param {number} partition The partition number.
         * @param {number} [backfillMinutes] The number of minutes of backfill requested.
         * @param {string} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
         * @param {string} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamData: async (partition: number, backfillMinutes?: number, startTime?: string, endTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partition' is not null or undefined
            assertParamExists('streamData', 'partition', partition)
            const localVarPath = `/2/tweets/compliance/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (backfillMinutes !== undefined) {
                localVarQueryParameter['backfill_minutes'] = backfillMinutes;
            }

            if (partition !== undefined) {
                localVarQueryParameter['partition'] = partition;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/tweets/compliance/stream',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Streams 100% of labeling events applied to Tweets
         * @summary Tweets Label stream
         * @param {number} [backfillMinutes] The number of minutes of backfill requested.
         * @param {string} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.
         * @param {string} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamTweetsLabelEvents: async (backfillMinutes?: number, startTime?: string, endTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/2/tweets/label/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (backfillMinutes !== undefined) {
                localVarQueryParameter['backfill_minutes'] = backfillMinutes;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/tweets/label/stream',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Streams 100% of compliance data for Users
         * @summary Users Compliance stream
         * @param {number} partition The partition number.
         * @param {number} [backfillMinutes] The number of minutes of backfill requested.
         * @param {string} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
         * @param {string} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamUsersData: async (partition: number, backfillMinutes?: number, startTime?: string, endTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partition' is not null or undefined
            assertParamExists('streamUsersData', 'partition', partition)
            const localVarPath = `/2/users/compliance/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (backfillMinutes !== undefined) {
                localVarQueryParameter['backfill_minutes'] = backfillMinutes;
            }

            if (partition !== undefined) {
                localVarQueryParameter['partition'] = partition;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/2/users/compliance/stream',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a compliance for the given job type
         * @summary Create compliance job
         * @param {ComplianceApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(requestParameters: ComplianceApiCreateJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateComplianceJobResponse>> {
            const createComplianceJobRequest: CreateComplianceJobRequest = {
                name: requestParameters.name,
                resumable: requestParameters.resumable,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(createComplianceJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single Compliance Job by ID
         * @summary Get Compliance Job
         * @param {ComplianceApiGetJobByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobById(requestParameters: ComplianceApiGetJobByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2ComplianceJobsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobById(requestParameters.id, requestParameters.complianceJobFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns recent Compliance Jobs for a given job type and optional job status
         * @summary List Compliance Jobs
         * @param {ComplianceApiListJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobs(requestParameters: ComplianceApiListJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Get2ComplianceJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobs(requestParameters.type, requestParameters.status, requestParameters.complianceJobFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Streams 100% of compliance data for Tweets
         * @summary Tweets Compliance stream
         * @param {ComplianceApiStreamDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamData(requestParameters: ComplianceApiStreamDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TweetComplianceStreamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamData(requestParameters.partition, requestParameters.backfillMinutes, requestParameters.startTime, requestParameters.endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Streams 100% of labeling events applied to Tweets
         * @summary Tweets Label stream
         * @param {ComplianceApiStreamTweetsLabelEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamTweetsLabelEvents(requestParameters: ComplianceApiStreamTweetsLabelEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TweetLabelStreamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamTweetsLabelEvents(requestParameters.backfillMinutes, requestParameters.startTime, requestParameters.endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Streams 100% of compliance data for Users
         * @summary Users Compliance stream
         * @param {ComplianceApiStreamUsersDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamUsersData(requestParameters: ComplianceApiStreamUsersDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserComplianceStreamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamUsersData(requestParameters.partition, requestParameters.backfillMinutes, requestParameters.startTime, requestParameters.endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComplianceApiFp(configuration)
    return {
        /**
         * Creates a compliance for the given job type
         * @summary Create compliance job
         * @param {ComplianceApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(requestParameters: ComplianceApiCreateJobRequest, options?: AxiosRequestConfig): AxiosPromise<CreateComplianceJobResponse> {
            return localVarFp.createJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single Compliance Job by ID
         * @summary Get Compliance Job
         * @param {ComplianceApiGetJobByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobById(requestParameters: ComplianceApiGetJobByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Get2ComplianceJobsIdResponse> {
            return localVarFp.getJobById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns recent Compliance Jobs for a given job type and optional job status
         * @summary List Compliance Jobs
         * @param {ComplianceApiListJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs(requestParameters: ComplianceApiListJobsRequest, options?: AxiosRequestConfig): AxiosPromise<Get2ComplianceJobsResponse> {
            return localVarFp.listJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Streams 100% of compliance data for Tweets
         * @summary Tweets Compliance stream
         * @param {ComplianceApiStreamDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamData(requestParameters: ComplianceApiStreamDataRequest, options?: AxiosRequestConfig): AxiosPromise<TweetComplianceStreamResponse> {
            return localVarFp.streamData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Streams 100% of labeling events applied to Tweets
         * @summary Tweets Label stream
         * @param {ComplianceApiStreamTweetsLabelEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamTweetsLabelEvents(requestParameters: ComplianceApiStreamTweetsLabelEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TweetLabelStreamResponse> {
            return localVarFp.streamTweetsLabelEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Streams 100% of compliance data for Users
         * @summary Users Compliance stream
         * @param {ComplianceApiStreamUsersDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamUsersData(requestParameters: ComplianceApiStreamUsersDataRequest, options?: AxiosRequestConfig): AxiosPromise<UserComplianceStreamResponse> {
            return localVarFp.streamUsersData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createJob operation in ComplianceApi.
 * @export
 * @interface ComplianceApiCreateJobRequest
 */
export type ComplianceApiCreateJobRequest = {
    
} & CreateComplianceJobRequest

/**
 * Request parameters for getJobById operation in ComplianceApi.
 * @export
 * @interface ComplianceApiGetJobByIdRequest
 */
export type ComplianceApiGetJobByIdRequest = {
    
    /**
    * The ID of the Compliance Job to retrieve.
    * @type {string}
    * @memberof ComplianceApiGetJobById
    */
    readonly id: string
    
    /**
    * A comma separated list of ComplianceJob fields to display.
    * @type {Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>}
    * @memberof ComplianceApiGetJobById
    */
    readonly complianceJobFields?: Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>
    
}

/**
 * Request parameters for listJobs operation in ComplianceApi.
 * @export
 * @interface ComplianceApiListJobsRequest
 */
export type ComplianceApiListJobsRequest = {
    
    /**
    * Type of Compliance Job to list.
    * @type {'tweets' | 'users'}
    * @memberof ComplianceApiListJobs
    */
    readonly type: 'tweets' | 'users'
    
    /**
    * Status of Compliance Job to list.
    * @type {'created' | 'in_progress' | 'failed' | 'complete'}
    * @memberof ComplianceApiListJobs
    */
    readonly status?: 'created' | 'in_progress' | 'failed' | 'complete'
    
    /**
    * A comma separated list of ComplianceJob fields to display.
    * @type {Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>}
    * @memberof ComplianceApiListJobs
    */
    readonly complianceJobFields?: Set<'created_at' | 'download_expires_at' | 'download_url' | 'id' | 'name' | 'resumable' | 'status' | 'type' | 'upload_expires_at' | 'upload_url'>
    
}

/**
 * Request parameters for streamData operation in ComplianceApi.
 * @export
 * @interface ComplianceApiStreamDataRequest
 */
export type ComplianceApiStreamDataRequest = {
    
    /**
    * The partition number.
    * @type {number}
    * @memberof ComplianceApiStreamData
    */
    readonly partition: number
    
    /**
    * The number of minutes of backfill requested.
    * @type {number}
    * @memberof ComplianceApiStreamData
    */
    readonly backfillMinutes?: number
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamData
    */
    readonly startTime?: string
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamData
    */
    readonly endTime?: string
    
}

/**
 * Request parameters for streamTweetsLabelEvents operation in ComplianceApi.
 * @export
 * @interface ComplianceApiStreamTweetsLabelEventsRequest
 */
export type ComplianceApiStreamTweetsLabelEventsRequest = {
    
    /**
    * The number of minutes of backfill requested.
    * @type {number}
    * @memberof ComplianceApiStreamTweetsLabelEvents
    */
    readonly backfillMinutes?: number
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamTweetsLabelEvents
    */
    readonly startTime?: string
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamTweetsLabelEvents
    */
    readonly endTime?: string
    
}

/**
 * Request parameters for streamUsersData operation in ComplianceApi.
 * @export
 * @interface ComplianceApiStreamUsersDataRequest
 */
export type ComplianceApiStreamUsersDataRequest = {
    
    /**
    * The partition number.
    * @type {number}
    * @memberof ComplianceApiStreamUsersData
    */
    readonly partition: number
    
    /**
    * The number of minutes of backfill requested.
    * @type {number}
    * @memberof ComplianceApiStreamUsersData
    */
    readonly backfillMinutes?: number
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamUsersData
    */
    readonly startTime?: string
    
    /**
    * YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.
    * @type {string}
    * @memberof ComplianceApiStreamUsersData
    */
    readonly endTime?: string
    
}

/**
 * ComplianceApiGenerated - object-oriented interface
 * @export
 * @class ComplianceApiGenerated
 * @extends {BaseAPI}
 */
export class ComplianceApiGenerated extends BaseAPI {
    /**
     * Creates a compliance for the given job type
     * @summary Create compliance job
     * @param {ComplianceApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public createJob(requestParameters: ComplianceApiCreateJobRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).createJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single Compliance Job by ID
     * @summary Get Compliance Job
     * @param {ComplianceApiGetJobByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public getJobById(requestParameters: ComplianceApiGetJobByIdRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).getJobById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns recent Compliance Jobs for a given job type and optional job status
     * @summary List Compliance Jobs
     * @param {ComplianceApiListJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public listJobs(requestParameters: ComplianceApiListJobsRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).listJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Streams 100% of compliance data for Tweets
     * @summary Tweets Compliance stream
     * @param {ComplianceApiStreamDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public streamData(requestParameters: ComplianceApiStreamDataRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).streamData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Streams 100% of labeling events applied to Tweets
     * @summary Tweets Label stream
     * @param {ComplianceApiStreamTweetsLabelEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public streamTweetsLabelEvents(requestParameters: ComplianceApiStreamTweetsLabelEventsRequest = {}, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).streamTweetsLabelEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Streams 100% of compliance data for Users
     * @summary Users Compliance stream
     * @param {ComplianceApiStreamUsersDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApiGenerated
     */
    public streamUsersData(requestParameters: ComplianceApiStreamUsersDataRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).streamUsersData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
